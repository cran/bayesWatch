// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393
#define EIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS
#include <Eigen/Eigen>
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// complete_lambda
arma::mat complete_lambda(const arma::mat& orig_chol_mat, const arma::mat& current_G, int p, int cores);
RcppExport SEXP _bayesWatch_complete_lambda(SEXP orig_chol_matSEXP, SEXP current_GSEXP, SEXP pSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type orig_chol_mat(orig_chol_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type current_G(current_GSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(complete_lambda(orig_chol_mat, current_G, p, cores));
    return rcpp_result_gen;
END_RCPP
}
// DRJ_MCMC_singlestep
List DRJ_MCMC_singlestep(const arma::mat& current_lambda, const arma::mat& lambda_0, const arma::mat& current_G, const int p, const int cores, const int edge_updated_i, const int edge_updated_j, const arma::mat& scale_matrix, const int n_regime, const arma::vec mean_vector_regime, const arma::mat nS2, const int b, const double spread_parameter_sd2, const arma::vec& mean_hyperparameter, const double lambda_hyperparameter, const double g_prior);
RcppExport SEXP _bayesWatch_DRJ_MCMC_singlestep(SEXP current_lambdaSEXP, SEXP lambda_0SEXP, SEXP current_GSEXP, SEXP pSEXP, SEXP coresSEXP, SEXP edge_updated_iSEXP, SEXP edge_updated_jSEXP, SEXP scale_matrixSEXP, SEXP n_regimeSEXP, SEXP mean_vector_regimeSEXP, SEXP nS2SEXP, SEXP bSEXP, SEXP spread_parameter_sd2SEXP, SEXP mean_hyperparameterSEXP, SEXP lambda_hyperparameterSEXP, SEXP g_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type current_lambda(current_lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda_0(lambda_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type current_G(current_GSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< const int >::type edge_updated_i(edge_updated_iSEXP);
    Rcpp::traits::input_parameter< const int >::type edge_updated_j(edge_updated_jSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type scale_matrix(scale_matrixSEXP);
    Rcpp::traits::input_parameter< const int >::type n_regime(n_regimeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mean_vector_regime(mean_vector_regimeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type nS2(nS2SEXP);
    Rcpp::traits::input_parameter< const int >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double >::type spread_parameter_sd2(spread_parameter_sd2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean_hyperparameter(mean_hyperparameterSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_hyperparameter(lambda_hyperparameterSEXP);
    Rcpp::traits::input_parameter< const double >::type g_prior(g_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(DRJ_MCMC_singlestep(current_lambda, lambda_0, current_G, p, cores, edge_updated_i, edge_updated_j, scale_matrix, n_regime, mean_vector_regime, nS2, b, spread_parameter_sd2, mean_hyperparameter, lambda_hyperparameter, g_prior));
    return rcpp_result_gen;
END_RCPP
}
// log_dNormalWishart_posterior_unnormalized
double log_dNormalWishart_posterior_unnormalized(const arma::mat& data_matrix, const arma::vec& m_hyperparameter, const arma::mat& scale_matrix, const double lambda_hyperparameter, const double nu_wishartDF, const arma::vec& observed_mu, const arma::mat& observed_precision);
RcppExport SEXP _bayesWatch_log_dNormalWishart_posterior_unnormalized(SEXP data_matrixSEXP, SEXP m_hyperparameterSEXP, SEXP scale_matrixSEXP, SEXP lambda_hyperparameterSEXP, SEXP nu_wishartDFSEXP, SEXP observed_muSEXP, SEXP observed_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data_matrix(data_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_hyperparameter(m_hyperparameterSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type scale_matrix(scale_matrixSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_hyperparameter(lambda_hyperparameterSEXP);
    Rcpp::traits::input_parameter< const double >::type nu_wishartDF(nu_wishartDFSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type observed_mu(observed_muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type observed_precision(observed_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(log_dNormalWishart_posterior_unnormalized(data_matrix, m_hyperparameter, scale_matrix, lambda_hyperparameter, nu_wishartDF, observed_mu, observed_precision));
    return rcpp_result_gen;
END_RCPP
}
// log_dNormalWishart_unnormalized
double log_dNormalWishart_unnormalized(const arma::vec& m_hyperparameter, const arma::mat& posterior_inv_scale, const double lambda_hyperparameter, const double nu_wishartDF, const arma::vec& observed_mu, const arma::mat& observed_precision);
RcppExport SEXP _bayesWatch_log_dNormalWishart_unnormalized(SEXP m_hyperparameterSEXP, SEXP posterior_inv_scaleSEXP, SEXP lambda_hyperparameterSEXP, SEXP nu_wishartDFSEXP, SEXP observed_muSEXP, SEXP observed_precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type m_hyperparameter(m_hyperparameterSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type posterior_inv_scale(posterior_inv_scaleSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_hyperparameter(lambda_hyperparameterSEXP);
    Rcpp::traits::input_parameter< const double >::type nu_wishartDF(nu_wishartDFSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type observed_mu(observed_muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type observed_precision(observed_precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(log_dNormalWishart_unnormalized(m_hyperparameter, posterior_inv_scale, lambda_hyperparameter, nu_wishartDF, observed_mu, observed_precision));
    return rcpp_result_gen;
END_RCPP
}
// rmu_0
arma::vec rmu_0(const arma::mat& sigma_0, const arma::mat& sum_precision_matrices, const arma::vec& sum_precision_times_mu, const arma::vec& m_hyperparameter);
RcppExport SEXP _bayesWatch_rmu_0(SEXP sigma_0SEXP, SEXP sum_precision_matricesSEXP, SEXP sum_precision_times_muSEXP, SEXP m_hyperparameterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_0(sigma_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sum_precision_matrices(sum_precision_matricesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sum_precision_times_mu(sum_precision_times_muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_hyperparameter(m_hyperparameterSEXP);
    rcpp_result_gen = Rcpp::wrap(rmu_0(sigma_0, sum_precision_matrices, sum_precision_times_mu, m_hyperparameter));
    return rcpp_result_gen;
END_RCPP
}
// log_MH_Gupdate_Rcpp
SEXP log_MH_Gupdate_Rcpp(int selected_edge_i, int selected_edge_j, Rcpp::NumericVector oldG, Rcpp::NumericVector newG, Rcpp::NumericVector oldK, Rcpp::NumericVector newK, int b, int p);
RcppExport SEXP _bayesWatch_log_MH_Gupdate_Rcpp(SEXP selected_edge_iSEXP, SEXP selected_edge_jSEXP, SEXP oldGSEXP, SEXP newGSEXP, SEXP oldKSEXP, SEXP newKSEXP, SEXP bSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type selected_edge_i(selected_edge_iSEXP);
    Rcpp::traits::input_parameter< int >::type selected_edge_j(selected_edge_jSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type oldG(oldGSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type newG(newGSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type oldK(oldKSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type newK(newKSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(log_MH_Gupdate_Rcpp(selected_edge_i, selected_edge_j, oldG, newG, oldK, newK, b, p));
    return rcpp_result_gen;
END_RCPP
}
// log_MH_mergesplit_Rcpp
SEXP log_MH_mergesplit_Rcpp(Rcpp::NumericVector oldK, Rcpp::NumericVector newK, int b, int p);
RcppExport SEXP _bayesWatch_log_MH_mergesplit_Rcpp(SEXP oldKSEXP, SEXP newKSEXP, SEXP bSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type oldK(oldKSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type newK(newKSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(log_MH_mergesplit_Rcpp(oldK, newK, b, p));
    return rcpp_result_gen;
END_RCPP
}
// log_transition_probability_HMM_Rcpp
SEXP log_transition_probability_HMM_Rcpp(Rcpp::NumericVector transition_probabilities, Rcpp::NumericVector my_states, int length_of_vector);
RcppExport SEXP _bayesWatch_log_transition_probability_HMM_Rcpp(SEXP transition_probabilitiesSEXP, SEXP my_statesSEXP, SEXP length_of_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type transition_probabilities(transition_probabilitiesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type my_states(my_statesSEXP);
    Rcpp::traits::input_parameter< int >::type length_of_vector(length_of_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(log_transition_probability_HMM_Rcpp(transition_probabilities, my_states, length_of_vector));
    return rcpp_result_gen;
END_RCPP
}
// select_edge_from_G_prior_Rcpp
Rcpp::NumericVector select_edge_from_G_prior_Rcpp(Rcpp::NumericVector G, Rcpp::NumericVector g_prior, int p);
RcppExport SEXP _bayesWatch_select_edge_from_G_prior_Rcpp(SEXP GSEXP, SEXP g_priorSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type G(GSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type g_prior(g_priorSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(select_edge_from_G_prior_Rcpp(G, g_prior, p));
    return rcpp_result_gen;
END_RCPP
}
// log_dmvnrm_arma_regular
double log_dmvnrm_arma_regular(arma::mat const& data_x, arma::rowvec const& mean, arma::mat const& prec);
RcppExport SEXP _bayesWatch_log_dmvnrm_arma_regular(SEXP data_xSEXP, SEXP meanSEXP, SEXP precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type data_x(data_xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type prec(precSEXP);
    rcpp_result_gen = Rcpp::wrap(log_dmvnrm_arma_regular(data_x, mean, prec));
    return rcpp_result_gen;
END_RCPP
}
// redraw_Z_arma
arma::mat redraw_Z_arma(const arma::mat& current_data, const arma::mat& current_precision, const arma::vec& current_mu, int p, const arma::vec& lower_bounds, const arma::vec& upper_bounds, const arma::mat& lower_bound_is_equal, const arma::mat& upper_bound_is_equal, const arma::mat& is_missing, const arma::vec& is_continuous, const arma::mat& raw_data, const Rcpp::List& ordinal_levels, const arma::vec& is_ordinal, const arma::vec& discrete_levels_indicator, int cores);
RcppExport SEXP _bayesWatch_redraw_Z_arma(SEXP current_dataSEXP, SEXP current_precisionSEXP, SEXP current_muSEXP, SEXP pSEXP, SEXP lower_boundsSEXP, SEXP upper_boundsSEXP, SEXP lower_bound_is_equalSEXP, SEXP upper_bound_is_equalSEXP, SEXP is_missingSEXP, SEXP is_continuousSEXP, SEXP raw_dataSEXP, SEXP ordinal_levelsSEXP, SEXP is_ordinalSEXP, SEXP discrete_levels_indicatorSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type current_data(current_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type current_precision(current_precisionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type current_mu(current_muSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower_bounds(lower_boundsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper_bounds(upper_boundsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lower_bound_is_equal(lower_bound_is_equalSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type upper_bound_is_equal(upper_bound_is_equalSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type is_missing(is_missingSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type is_continuous(is_continuousSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type raw_data(raw_dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type ordinal_levels(ordinal_levelsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type is_ordinal(is_ordinalSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type discrete_levels_indicator(discrete_levels_indicatorSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(redraw_Z_arma(current_data, current_precision, current_mu, p, lower_bounds, upper_bounds, lower_bound_is_equal, upper_bound_is_equal, is_missing, is_continuous, raw_data, ordinal_levels, is_ordinal, discrete_levels_indicator, cores));
    return rcpp_result_gen;
END_RCPP
}
// redraw_Z_arma_justmissings
List redraw_Z_arma_justmissings(const arma::mat& current_data, const arma::mat& current_precision, const arma::vec& current_mu, int p, const arma::vec& lower_bounds, const arma::vec& upper_bounds, const arma::mat& lower_bound_is_equal, const arma::mat& upper_bound_is_equal, const arma::mat& is_missing, const arma::vec& is_continuous, int cores);
RcppExport SEXP _bayesWatch_redraw_Z_arma_justmissings(SEXP current_dataSEXP, SEXP current_precisionSEXP, SEXP current_muSEXP, SEXP pSEXP, SEXP lower_boundsSEXP, SEXP upper_boundsSEXP, SEXP lower_bound_is_equalSEXP, SEXP upper_bound_is_equalSEXP, SEXP is_missingSEXP, SEXP is_continuousSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type current_data(current_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type current_precision(current_precisionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type current_mu(current_muSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower_bounds(lower_boundsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper_bounds(upper_boundsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lower_bound_is_equal(lower_bound_is_equalSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type upper_bound_is_equal(upper_bound_is_equalSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type is_missing(is_missingSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type is_continuous(is_continuousSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(redraw_Z_arma_justmissings(current_data, current_precision, current_mu, p, lower_bounds, upper_bounds, lower_bound_is_equal, upper_bound_is_equal, is_missing, is_continuous, cores));
    return rcpp_result_gen;
END_RCPP
}
// get_justmissings_density
List get_justmissings_density(const arma::mat& current_data, const arma::mat& current_precision, const arma::vec& current_mu, int p, const arma::vec& lower_bounds, const arma::vec& upper_bounds, const arma::mat& lower_bound_is_equal, const arma::mat& upper_bound_is_equal, const arma::mat& is_missing, const arma::vec& is_continuous, int cores);
RcppExport SEXP _bayesWatch_get_justmissings_density(SEXP current_dataSEXP, SEXP current_precisionSEXP, SEXP current_muSEXP, SEXP pSEXP, SEXP lower_boundsSEXP, SEXP upper_boundsSEXP, SEXP lower_bound_is_equalSEXP, SEXP upper_bound_is_equalSEXP, SEXP is_missingSEXP, SEXP is_continuousSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type current_data(current_dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type current_precision(current_precisionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type current_mu(current_muSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower_bounds(lower_boundsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper_bounds(upper_boundsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lower_bound_is_equal(lower_bound_is_equalSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type upper_bound_is_equal(upper_bound_is_equalSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type is_missing(is_missingSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type is_continuous(is_continuousSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(get_justmissings_density(current_data, current_precision, current_mu, p, lower_bounds, upper_bounds, lower_bound_is_equal, upper_bound_is_equal, is_missing, is_continuous, cores));
    return rcpp_result_gen;
END_RCPP
}
// log_normalizing_g_wishart_posterior_laplace
List log_normalizing_g_wishart_posterior_laplace(NumericMatrix graph, NumericMatrix D_post, int Delta, int n, int p);
RcppExport SEXP _bayesWatch_log_normalizing_g_wishart_posterior_laplace(SEXP graphSEXP, SEXP D_postSEXP, SEXP DeltaSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type graph(graphSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type D_post(D_postSEXP);
    Rcpp::traits::input_parameter< int >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(log_normalizing_g_wishart_posterior_laplace(graph, D_post, Delta, n, p));
    return rcpp_result_gen;
END_RCPP
}
// calc_logprob_Gibbs_comp
double calc_logprob_Gibbs_comp(const arma::mat& current_precision, const arma::vec& current_mu, const arma::vec& regime_comp_log_probs, const arma::mat& current_data, int proposed_component);
RcppExport SEXP _bayesWatch_calc_logprob_Gibbs_comp(SEXP current_precisionSEXP, SEXP current_muSEXP, SEXP regime_comp_log_probsSEXP, SEXP current_dataSEXP, SEXP proposed_componentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type current_precision(current_precisionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type current_mu(current_muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type regime_comp_log_probs(regime_comp_log_probsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type current_data(current_dataSEXP);
    Rcpp::traits::input_parameter< int >::type proposed_component(proposed_componentSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_logprob_Gibbs_comp(current_precision, current_mu, regime_comp_log_probs, current_data, proposed_component));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_swap_btwn_two
List gibbs_swap_btwn_two(const arma::mat& first_precision, const arma::mat& second_precision, const arma::vec& first_mu, const arma::vec& second_mu, const arma::vec& component_log_probs, const arma::vec& indices_of_split_component, const arma::mat& data_points_of_state, arma::vec& assignments_launch, int first_component, int second_component, int num_gibbs_sweeps);
RcppExport SEXP _bayesWatch_gibbs_swap_btwn_two(SEXP first_precisionSEXP, SEXP second_precisionSEXP, SEXP first_muSEXP, SEXP second_muSEXP, SEXP component_log_probsSEXP, SEXP indices_of_split_componentSEXP, SEXP data_points_of_stateSEXP, SEXP assignments_launchSEXP, SEXP first_componentSEXP, SEXP second_componentSEXP, SEXP num_gibbs_sweepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type first_precision(first_precisionSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type second_precision(second_precisionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type first_mu(first_muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type second_mu(second_muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type component_log_probs(component_log_probsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type indices_of_split_component(indices_of_split_componentSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data_points_of_state(data_points_of_stateSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type assignments_launch(assignments_launchSEXP);
    Rcpp::traits::input_parameter< int >::type first_component(first_componentSEXP);
    Rcpp::traits::input_parameter< int >::type second_component(second_componentSEXP);
    Rcpp::traits::input_parameter< int >::type num_gibbs_sweeps(num_gibbs_sweepsSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_swap_btwn_two(first_precision, second_precision, first_mu, second_mu, component_log_probs, indices_of_split_component, data_points_of_state, assignments_launch, first_component, second_component, num_gibbs_sweeps));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_swap_comps
arma::vec gibbs_swap_comps(const arma::mat& data_points_of_state, arma::vec& cluster_assignments, const arma::vec& regime_comp_log_probs, List precisions, List mus, int assignments_maximum, int gibbs_sweeps);
RcppExport SEXP _bayesWatch_gibbs_swap_comps(SEXP data_points_of_stateSEXP, SEXP cluster_assignmentsSEXP, SEXP regime_comp_log_probsSEXP, SEXP precisionsSEXP, SEXP musSEXP, SEXP assignments_maximumSEXP, SEXP gibbs_sweepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data_points_of_state(data_points_of_stateSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type cluster_assignments(cluster_assignmentsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type regime_comp_log_probs(regime_comp_log_probsSEXP);
    Rcpp::traits::input_parameter< List >::type precisions(precisionsSEXP);
    Rcpp::traits::input_parameter< List >::type mus(musSEXP);
    Rcpp::traits::input_parameter< int >::type assignments_maximum(assignments_maximumSEXP);
    Rcpp::traits::input_parameter< int >::type gibbs_sweeps(gibbs_sweepsSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_swap_comps(data_points_of_state, cluster_assignments, regime_comp_log_probs, precisions, mus, assignments_maximum, gibbs_sweeps));
    return rcpp_result_gen;
END_RCPP
}
// rmvn_Rcpp
Rcpp::NumericVector rmvn_Rcpp(Rcpp::NumericVector mus, Rcpp::NumericVector K, int p);
RcppExport SEXP _bayesWatch_rmvn_Rcpp(SEXP musSEXP, SEXP KSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mus(musSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvn_Rcpp(mus, K, p));
    return rcpp_result_gen;
END_RCPP
}
// rwish_Rcpp
Rcpp::NumericVector rwish_Rcpp(Rcpp::NumericVector Ts, int b, int p);
RcppExport SEXP _bayesWatch_rwish_Rcpp(SEXP TsSEXP, SEXP bSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Ts(TsSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rwish_Rcpp(Ts, b, p));
    return rcpp_result_gen;
END_RCPP
}
// rgwish_Rcpp
List rgwish_Rcpp(const Rcpp::NumericVector G, const Rcpp::NumericVector D, int b, int p, double threshold);
RcppExport SEXP _bayesWatch_rgwish_Rcpp(SEXP GSEXP, SEXP DSEXP, SEXP bSEXP, SEXP pSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(rgwish_Rcpp(G, D, b, p, threshold));
    return rcpp_result_gen;
END_RCPP
}
// log_wishart_normalizingConstant_mc_Rcpp
Rcpp::NumericVector log_wishart_normalizingConstant_mc_Rcpp(const Rcpp::NumericVector G, const Rcpp::NumericVector nu, const int b, const Rcpp::NumericVector H, const int check_H, const int mc_iters, const int p);
RcppExport SEXP _bayesWatch_log_wishart_normalizingConstant_mc_Rcpp(SEXP GSEXP, SEXP nuSEXP, SEXP bSEXP, SEXP HSEXP, SEXP check_HSEXP, SEXP mc_itersSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const int >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< const int >::type check_H(check_HSEXP);
    Rcpp::traits::input_parameter< const int >::type mc_iters(mc_itersSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(log_wishart_normalizingConstant_mc_Rcpp(G, nu, b, H, check_H, mc_iters, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayesWatch_complete_lambda", (DL_FUNC) &_bayesWatch_complete_lambda, 4},
    {"_bayesWatch_DRJ_MCMC_singlestep", (DL_FUNC) &_bayesWatch_DRJ_MCMC_singlestep, 16},
    {"_bayesWatch_log_dNormalWishart_posterior_unnormalized", (DL_FUNC) &_bayesWatch_log_dNormalWishart_posterior_unnormalized, 7},
    {"_bayesWatch_log_dNormalWishart_unnormalized", (DL_FUNC) &_bayesWatch_log_dNormalWishart_unnormalized, 6},
    {"_bayesWatch_rmu_0", (DL_FUNC) &_bayesWatch_rmu_0, 4},
    {"_bayesWatch_log_MH_Gupdate_Rcpp", (DL_FUNC) &_bayesWatch_log_MH_Gupdate_Rcpp, 8},
    {"_bayesWatch_log_MH_mergesplit_Rcpp", (DL_FUNC) &_bayesWatch_log_MH_mergesplit_Rcpp, 4},
    {"_bayesWatch_log_transition_probability_HMM_Rcpp", (DL_FUNC) &_bayesWatch_log_transition_probability_HMM_Rcpp, 3},
    {"_bayesWatch_select_edge_from_G_prior_Rcpp", (DL_FUNC) &_bayesWatch_select_edge_from_G_prior_Rcpp, 3},
    {"_bayesWatch_log_dmvnrm_arma_regular", (DL_FUNC) &_bayesWatch_log_dmvnrm_arma_regular, 3},
    {"_bayesWatch_redraw_Z_arma", (DL_FUNC) &_bayesWatch_redraw_Z_arma, 15},
    {"_bayesWatch_redraw_Z_arma_justmissings", (DL_FUNC) &_bayesWatch_redraw_Z_arma_justmissings, 11},
    {"_bayesWatch_get_justmissings_density", (DL_FUNC) &_bayesWatch_get_justmissings_density, 11},
    {"_bayesWatch_log_normalizing_g_wishart_posterior_laplace", (DL_FUNC) &_bayesWatch_log_normalizing_g_wishart_posterior_laplace, 5},
    {"_bayesWatch_calc_logprob_Gibbs_comp", (DL_FUNC) &_bayesWatch_calc_logprob_Gibbs_comp, 5},
    {"_bayesWatch_gibbs_swap_btwn_two", (DL_FUNC) &_bayesWatch_gibbs_swap_btwn_two, 11},
    {"_bayesWatch_gibbs_swap_comps", (DL_FUNC) &_bayesWatch_gibbs_swap_comps, 7},
    {"_bayesWatch_rmvn_Rcpp", (DL_FUNC) &_bayesWatch_rmvn_Rcpp, 3},
    {"_bayesWatch_rwish_Rcpp", (DL_FUNC) &_bayesWatch_rwish_Rcpp, 3},
    {"_bayesWatch_rgwish_Rcpp", (DL_FUNC) &_bayesWatch_rgwish_Rcpp, 5},
    {"_bayesWatch_log_wishart_normalizingConstant_mc_Rcpp", (DL_FUNC) &_bayesWatch_log_wishart_normalizingConstant_mc_Rcpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayesWatch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
